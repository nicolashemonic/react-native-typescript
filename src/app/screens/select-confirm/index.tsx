import React, { Component } from "react";
import { connect } from "react-redux";
import { View, Text, ScrollView } from "react-native";
import Button from "../../components/button";
import style from "./styles";
import FontAwesome, { Icons } from "react-native-fontawesome";
import PushNotification from "react-native-push-notification";
import { IRate } from "../../models/modify-rates";
import { Dispatch } from "redux";
import { NavigationScreenProp } from "react-navigation";

interface IProps {
	rates: IRate[];
	dispatch: Dispatch<any>;
	navigation: NavigationScreenProp<any, any>;
}

class SelectConfirmScreen extends Component<IProps, undefined> {
	static navigationOptions = {
		title: "Edit rate restrictions"
	};

	constructor(props) {
		super(props);
	}

	selectAction = () => {
		this.setState({});
	};

	confirm = () => {
		const { navigate } = this.props.navigation;
		const selectedRates = this.props.rates.filter(rate => rate.selected);
		const title = `${selectedRates.length} rates closed`;
		const message = selectedRates
			.map(rate => rate.key)
			.reduce((acc, value) => (acc ? `${acc}, ${value}` : value), "");

		navigate("Planning");

		PushNotification.localNotification({
			/* Android Only Properties */
			//id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
			//ticker: "My Notification Ticker", // (optional)
			//autoCancel: true, // (optional) default: true
			//largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
			//smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
			//bigText: "Full notification message", // (optional) default: "message" prop
			//subText: "This is a subText", // (optional) default: none
			color: "green", // (optional) default: system default
			//vibrate: true, // (optional) default: true
			//vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
			//tag: "some_tag", // (optional) add tag to message
			//group: "group", // (optional) add group to message
			//ongoing: false, // (optional) set whether this is an "ongoing" notification

			/* iOS only properties */
			//alertAction: // (optional) default: view
			//category: // (optional) default: null
			//userInfo: // (optional) default: null (object containing additional notification data)

			/* iOS and Android properties */
			title: title, // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
			message: message, // (required)
			//playSound: false, // (optional) default: true
			//soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
			number: "10" // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
			//repeatType: "day", // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
			//actions: '["Yes", "No"]' // (Android only) See the doc for notification actions to know more
		});
	};

	render() {
		const selectedRates = this.props.rates.filter(rate => rate.selected);
		return (
			<ScrollView contentContainerStyle={style.contentContainer}>
				<View style={style.confirmView}>
					<View style={style.titleView}>
						<FontAwesome style={style.iconAction}>{Icons.lock}</FontAwesome>
						<Text style={style.titleText}>{`Will close ${
							selectedRates.length
						} rates`}</Text>
					</View>
					<View style={style.sectionsView}>
						<View style={style.sectionView}>
							<Text style={style.sectionTitleText}>Rates</Text>
							{selectedRates.map(rate => (
								<Text key={rate.key} style={style.sectionValueText}>
									{rate.name}
								</Text>
							))}
						</View>
						<View style={style.sectionView}>
							<Text style={style.sectionTitleText}>Dates</Text>
							<Text style={style.sectionValueText}>
								from 20 to 2/21/2018 inclusive
							</Text>
							<Text style={style.sectionValueText}>on 5/21/2018</Text>
						</View>
					</View>
					<View style={style.buttonView}>
						<Button
							title="confirm modification"
							onPress={() => this.confirm()}
						/>
					</View>
				</View>
			</ScrollView>
		);
	}
}

const mapStateToProps = state => ({
	rates: state.modifyRates.rates
});

export default connect(mapStateToProps)(SelectConfirmScreen);
